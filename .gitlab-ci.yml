stages:
  - build
  - test
  - package

variables:
  RUST_BACKTRACE: 1
  GIT_STRATEGY: clone
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cargo/
    - rust/target/

# Linux build
linux_build:
  stage: build
  tags:
    - linux
  script:
    - echo "Running in $(pwd)"
    - ls -la
    # Install C compiler and build tools
    - apt-get update -y
    - apt-get install -y build-essential pkg-config libssl-dev
    # Setup Rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustc --version
    - cargo --version
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust/target/release/*.so
    expire_in: 1 week

# macOS build
macos_build:
  stage: build
  tags:
    - macos
  script:
    - echo "Running in $(pwd)"
    - ls -la
    - which rustc > /dev/null || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - xcode-select --install || true
    - rustc --version
    - cargo --version
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust/target/release/*.dylib
    expire_in: 1 week

# Windows build
windows_build:
  stage: build
  tags:
    - windows
  variables:
    GIT_SHELL: "cmd"
  script:
    - echo Running in %CD%
    - dir
    - curl -sSf https://win.rustup.rs/x86_64 -o rustup-init.exe
    - rustup-init.exe -y --default-toolchain stable --profile minimal
    - set PATH=%USERPROFILE%\.cargo\bin;%PATH%
    - rustc --version
    - cargo --version
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust\target\release\*.dll
    expire_in: 1 week

# Test jobs
linux_test:
  stage: test
  tags:
    - linux
  needs: 
    - linux_build
  script:
    - apt-get update -y
    - apt-get install -y build-essential pkg-config libssl-dev
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
    - export PATH="$HOME/.cargo/bin:$PATH"
    - cd rust
    - cargo test --verbose

macos_test:
  stage: test
  tags:
    - macos
  needs:
    - macos_build
  script:
    - which rustc > /dev/null || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - cd rust
    - cargo test --verbose

windows_test:
  stage: test
  tags:
    - windows
  needs:
    - windows_build
  variables:
    GIT_SHELL: "cmd"
  script:
    - set PATH=%USERPROFILE%\.cargo\bin;%PATH%
    - cd rust
    - cargo test --verbose

# Package jobs
linux_package:
  stage: package
  tags:
    - linux
  needs: 
    - linux_build
    - linux_test
  script:
    - mkdir -p artifacts/linux
    - cp rust/target/release/*.so artifacts/linux/ || echo "No .so files found"
  artifacts:
    paths:
      - artifacts/linux/
    expire_in: 1 week

macos_package:
  stage: package
  tags:
    - macos
  needs:
    - macos_build
    - macos_test
  script:
    - mkdir -p artifacts/macos
    - cp rust/target/release/*.dylib artifacts/macos/ || echo "No .dylib files found"
  artifacts:
    paths:
      - artifacts/macos/
    expire_in: 1 week

windows_package:
  stage: package
  tags:
    - windows
  needs:
    - windows_build
    - windows_test
  variables:
    GIT_SHELL: "cmd"
  script:
    - mkdir artifacts\windows
    - copy rust\target\release\*.dll artifacts\windows\ || echo "No .dll files found"
  artifacts:
    paths:
      - artifacts\windows\
    expire_in: 1 week
