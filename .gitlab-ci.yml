stages:
  - build
  - test
  - package

variables:
  RUST_BACKTRACE: 1
  GIT_STRATEGY: clone
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cargo/
    - rust/target/

# Linux build
linux_build:
  stage: build
  tags:
    - linux
  script:
    - echo "Running in $(pwd)"
    - ls -la
    # Clear .profile reference to non-existent cargo env file
    - cp ~/.profile ~/.profile.bak
    - grep -v ".cargo/env" ~/.profile.bak > ~/.profile || true
    # Install Rust without sudo
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    - export PATH="$HOME/.cargo/bin:$PATH"
    # Check for cc compiler - it should be installed on system, not using apt-get
    - which cc || echo "ERROR: C compiler not found - please install build-essential on the runner"
    - which gcc || echo "ERROR: GCC not found - please install build-essential on the runner"
    - rustc --version || echo "Rust not installed correctly"
    - cargo --version || echo "Cargo not installed correctly"
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust/target/release/*.so
    expire_in: 1 week

# macOS build
macos_build:
  stage: build
  tags:
    - macos
  script:
    - echo "Running in $(pwd)"
    - ls -la
    - which rustc > /dev/null || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - xcode-select --install || true
    - rustc --version
    - cargo --version
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust/target/release/*.dylib
    expire_in: 1 week

# Windows build
windows_build:
  stage: build
  tags:
    - windows
  script:
    - Write-Host "Running in $PWD"
    - dir
    # Download using PowerShell syntax
    - Invoke-WebRequest -Uri 'https://win.rustup.rs/x86_64' -OutFile 'rustup-init.exe'
    - Start-Process -FilePath .\rustup-init.exe -ArgumentList '-y', '--default-toolchain', 'stable', '--profile', 'minimal' -NoNewWindow -Wait
    # Update PATH to use the .cargo in the project directory
    - $env:Path += ";$PWD\.cargo\bin"
    - rustc --version
    - cargo --version
    - cd rust
    - cargo build --release --verbose
  artifacts:
    paths:
      - rust\target\release\*.dll
    expire_in: 1 week

# Test jobs
linux_test:
  stage: test
  tags:
    - linux
  needs:
    - linux_build
  script:
    # Fix .profile issue
    - cp ~/.profile ~/.profile.bak
    - grep -v ".cargo/env" ~/.profile.bak > ~/.profile || true
    # Use the already installed Rust
    - export PATH="$HOME/.cargo/bin:$PATH"
    - cd rust
    - cargo test --verbose

macos_test:
  stage: test
  tags:
    - macos
  needs:
    - macos_build
  script:
    - which rustc > /dev/null || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - cd rust
    - cargo test --verbose

windows_test:
  stage: test
  tags:
    - windows
  needs:
    - windows_build
  script:
    - $env:Path += ";$PWD\.cargo\bin"
    - cd rust
    - cargo test --verbose


# Package jobs
linux_package:
  stage: package
  tags:
    - linux
  needs:
    - linux_build
    - linux_test
  script:
    - mkdir -p artifacts/linux
    - cp rust/target/release/*.so artifacts/linux/ || echo "No .so files found"
  artifacts:
    paths:
      - artifacts/linux/
    expire_in: 1 week

macos_package:
  stage: package
  tags:
    - macos
  needs:
    - macos_build
    - macos_test
  script:
    - mkdir -p artifacts/macos
    - cp rust/target/release/*.dylib artifacts/macos/ || echo "No .dylib files found"
  artifacts:
    paths:
      - artifacts/macos/
    expire_in: 1 week

windows_package:
  stage: package
  tags:
    - windows
  needs:
    - windows_build
    - windows_test
  script:
    - New-Item -ItemType Directory -Path artifacts\windows -Force
    - Copy-Item -Path rust\target\release\*.dll -Destination artifacts\windows\ -ErrorAction SilentlyContinue
    - if (-not (Test-Path artifacts\windows\*.dll)) { Write-Host "No .dll files found" }
  artifacts:
    paths:
      - artifacts\windows\
    expire_in: 1 week
